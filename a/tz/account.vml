
/*************************************************************************************************
**
**    OPERATION: BuildScheduleList
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildScheduleList( VIEW lStuSch  BASED ON LOD lStuSch,
                   VIEW wStudent BASED ON LOD wStudent )

   VIEW mConListX  REGISTERED AS mConListX
   VIEW wXferO     REGISTERED AS wXferO
   VIEW vQualObject
   SHORT nRC

   // Build lStuSch list made up of students selected in mConList for Student and build the
   // appropriate Schedules.

   FOR EACH wXferO.ActivateID_List
      DELETE ENTITY wXferO.ActivateID_List NONE
   END
   FOR EACH mConListX.ContactListItem
      nRC = GetSelectStateOfEntity( mConListX, "ContactListItemStudent" )
      IF nRC = 1
         CREATE ENTITY wXferO.ActivateID_List
         SetAttributeFromAttribute( wXferO,    "ActivateID_List",        "ID",
                                    mConListX, "ContactListItemStudent", "ID" )
      END
   END

   /*END*/
   /* END */
   /* END*/
   /*END */
   // Activate lStuSch for the Students identified in ActivateID_List.
   GenerateQualFromEntityList( vQualObject, wXferO, "ActivateID_List", "", 0 )
   ActivateObjectInstance( lStuSch, "lStuSch", mConListX, vQualObject, zMULTIPLE )
   NAME VIEW lStuSch "lStuSch"

   // For each student, create the Schedule subobject.
   FOR EACH lStuSch.Student
      IF (lStuSch.Student.FinancialHoldFlag = "F" OR lStuSch.Student.FinancialHoldFlag = "D") AND
          wStudent.Work.FinancialHoldScheduleFlag = "Y"

         CREATE ENTITY lStuSch.StudentTerm
         CREATE ENTITY lStuSch.FinancialHoldMessage
         lStuSch.FinancialHoldMessage.Note = wStudent.Work.FinancialHoldNote
         // Report Title
         IF wStudent.CollegeTerm EXISTS
            wStudent.Work.ReportTitle = "Student Schedule for Term " + wStudent.CollegeTerm.YearSemester
         ELSE
            IF wStudent.Work.PrintOptionCohortFlag = "Y"
               IF lStuSch.Cohort EXISTS
                  wStudent.Work.ReportTitle = "Student Schedule for Cohort " + lStuSch.Cohort.Name
               ELSE
                  wStudent.Work.ReportTitle = "Student Schedule for Special Cohort Classes"
               END
            ELSE
               wStudent.Work.ReportTitle = "Student Schedule for Year " + wStudent.CollegeYear.Year
            END
         END
      ELSE
         BuildStudentSchedule( lStuSch, wStudent )

         // If the request is for no Room Number for a Term, make sure they are null.
         FOR EACH lStuSch.UpdateSchedule
            IF lStuSch.UpdateSchedule.Semester = "01" AND wStudent.Work.PrintRoomOptionFall != "Y"
               FOR EACH lStuSch.US_Registration
                  IF lStuSch.US_Class.wRoom != ""
                     lStuSch.US_Class.wRoom = ""
                  END
               END
               FOR EACH lStuSch.US_StudentWaitlisted
                  IF lStuSch.US_WaitlistedClass.wRoom != ""
                     lStuSch.US_WaitlistedClass.wRoom = ""
                  END
               END
            END
         END
         FOR EACH lStuSch.UpdateSchedule
            IF lStuSch.UpdateSchedule.Semester = "02" AND wStudent.Work.PrintRoomOptionJanuary != "Y"
               FOR EACH lStuSch.US_Registration
                  IF lStuSch.US_Class.wRoom != ""
                     lStuSch.US_Class.wRoom = ""
                  END
               END
               FOR EACH lStuSch.US_StudentWaitlisted
                  IF lStuSch.US_WaitlistedClass.wRoom != ""
                     lStuSch.US_WaitlistedClass.wRoom = ""
                  END
               END
            END
         END
         FOR EACH lStuSch.UpdateSchedule
            IF lStuSch.UpdateSchedule.Semester = "03" AND wStudent.Work.PrintRoomOptionSpring != "Y"
               FOR EACH lStuSch.US_Registration
                  IF lStuSch.US_Class.wRoom != ""
                     lStuSch.US_Class.wRoom = ""
                  END
               END
               FOR EACH lStuSch.US_StudentWaitlisted
                  IF lStuSch.US_WaitlistedClass.wRoom != ""
                     lStuSch.US_WaitlistedClass.wRoom = ""
                  END
               END
            END
         END
         FOR EACH lStuSch.UpdateSchedule
            IF lStuSch.UpdateSchedule.Semester = "04" AND wStudent.Work.PrintRoomOptionSummer != "Y"
               FOR EACH lStuSch.US_Registration
                  IF lStuSch.US_Class.wRoom != ""
                     lStuSch.US_Class.wRoom = ""
                  END
               END
               FOR EACH lStuSch.US_StudentWaitlisted
                  IF lStuSch.US_WaitlistedClass.wRoom != ""
                     lStuSch.US_WaitlistedClass.wRoom = ""
                  END
               END
            END
         END
      END
   END

   OrderEntityForView( lStuSch, "Student", "Person.LastName A Person.FirstName A" )

END

/*************************************************************************************************
**
**    OPERATION: BuildStudentSchedule
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildStudentSchedule( VIEW lStuSch  BASED ON LOD lStuSch,
                      VIEW wStudent BASED ON LOD wStudent )

   DECIMAL TermTotalCredits
   DECIMAL YearTotalCredits
   STRING ( 20 ) MeetingDay
   STRING ( 30 ) BuildingRoomCode
   STRING ( 20 ) szClassNumber
   STRING ( 10 ) szCourseNumber
   STRING ( 3 )  szTopicNumber
   STRING ( 3 )  szSection
   STRING ( 10 ) szDayOfWeek
   INTEGER       CollegeTermID

   // Title
   IF wStudent.CollegeTerm EXISTS
      wStudent.Work.ReportTitle = "Student Schedule for Term " + wStudent.CollegeTerm.YearSemester
   ELSE
      IF wStudent.Work.PrintOptionCohortFlag = "Y"
         IF lStuSch.Cohort EXISTS
            wStudent.Work.ReportTitle = "Student Schedule for Cohort " + lStuSch.Cohort.Name
         ELSE
            wStudent.Work.ReportTitle = "Student Schedule for Special Cohort Classes"
         END
      ELSE
         wStudent.Work.ReportTitle = "Student Schedule for Year " + wStudent.CollegeYear.Year
      END
   END
   CREATE ENTITY lStuSch.StudentTerm

   // Major1 and Advisor1 settings.
   SET CURSOR FIRST lStuSch.StudentMajorDegreeTrack
   IF RESULT >= zCURSOR_SET
      IF lStuSch.DegreeMajor EXISTS
         lStuSch.Student.wMajor1 = lStuSch.DegreeMajor.Name
      END
      lStuSch.Student.wDegreeTrack1 = lStuSch.MajorDegreeTrack.Name
      IF lStuSch.Advisor EXISTS
         lStuSch.Student.wAdvisor1 = lStuSch.Advisor.ShortName
      END

      // Major2 and Advisor2 settings.
      SET CURSOR NEXT lStuSch.StudentMajorDegreeTrack
      IF RESULT >= zCURSOR_SET
         IF lStuSch.DegreeMajor EXISTS
            lStuSch.Student.wMajor2 = lStuSch.DegreeMajor.Name
         END
         lStuSch.Student.wDegreeTrack2 = lStuSch.MajorDegreeTrack.Name
         IF lStuSch.Advisor EXISTS
            lStuSch.Student.wAdvisor2 = lStuSch.Advisor.ShortName
         END
      END
   END

   // Minor1 and Minor2 settings.
   SET CURSOR FIRST lStuSch.StudentMinorDegreeTrack
   IF RESULT >= zCURSOR_SET
      lStuSch.Student.wMinor1 = lStuSch.DegreeMinor.Name
      SET CURSOR NEXT lStuSch.StudentMinorDegreeTrack
      IF RESULT >= zCURSOR_SET
         lStuSch.Student.wMinor2 = lStuSch.DegreeMinor.Name
      END
   END

   IF wStudent.CollegeYear EXISTS
      // Build the Schedule for the whole College Year.
      FOR EACH wStudent.YearCollegeTerm
         // Build the Schedule for the Term.
         CREATE ENTITY lStuSch.UpdateSchedule
         lStuSch.UpdateSchedule.wTermCohortPromptText = "Term"
         lStuSch.UpdateSchedule.YearSemester = wStudent.YearCollegeTerm.YearSemester
         lStuSch.UpdateSchedule.Semester     = wStudent.YearCollegeTerm.Semester
         FOR EACH lStuSch.Registration
            CollegeTermID = 0
            IF lStuSch.RegisteredCollegeTerm EXISTS
               CollegeTermID = lStuSch.RegisteredCollegeTerm.ID
            ELSE
               IF lStuSch.RegistrationCollegeTerm EXISTS
                  CollegeTermID = lStuSch.RegistrationCollegeTerm.ID
               END
            END
            IF CollegeTermID != 0
               IF CollegeTermID = wStudent.YearCollegeTerm.ID AND
                  (lStuSch.Registration.Status = "C" OR lStuSch.Registration.Status = "T")

                  INCLUDE lStuSch.US_Registration FROM lStuSch.Registration
                  GetStringFromAttributeByContext( szDayOfWeek, lStuSch, "US_Class", "FinalExamDate", "DayOfWeek", 10 )
                  SetAttrFromStrByContext( lStuSch, "US_Class", "wFinalExamDayOfWeek", szDayOfWeek, "" )
               END
            END
            /*IF lStuSch.RegistrationCollegeTerm EXISTS
               IF lStuSch.RegistrationCollegeTerm.ID = wStudent.YearCollegeTerm.ID AND
                  (lStuSch.Registration.Status = "C" OR lStuSch.Registration.Status = "T")

                  INCLUDE lStuSch.US_Registration FROM lStuSch.Registration
               END
            END*/
         END
         FOR EACH lStuSch.StudentWaitlisted
            IF lStuSch.WaitlistedCollegeTerm EXISTS
               IF lStuSch.WaitlistedCollegeTerm.ID = wStudent.YearCollegeTerm.ID
                  INCLUDE lStuSch.US_StudentWaitlisted FROM lStuSch.StudentWaitlisted
               END
            END
         END
      END
   ELSE
      IF wStudent.Work.PrintOptionCohortFlag = "Y"
         // Build the Schedule for a Cohort Student.
         // If the Student isn't assigned to a Cohort, we will title the entry "Special Cohort Classes".
         // We include ALL enrolled entries for the schedule.
         CREATE ENTITY lStuSch.UpdateSchedule
         lStuSch.UpdateSchedule.wTermCohortPromptText = "Cohort"
         IF lStuSch.Cohort EXISTS
            lStuSch.UpdateSchedule.YearSemester = lStuSch.Cohort.Name
         ELSE
            lStuSch.UpdateSchedule.YearSemester = "Special Cohort Classes"
         END
         FOR EACH lStuSch.Registration
            IF lStuSch.Registration.Status = "T"
               INCLUDE lStuSch.US_Registration FROM lStuSch.Registration
               OrderEntityForView( lStuSch, "US_ClassRoomSession", "MeetingDate A" )
            END
         END
         OrderEntityForView( lStuSch, "US_Registration", "US_Class.ClassStartDate A" )
      ELSE
         // Build the Schedule for the Term.
         CREATE ENTITY lStuSch.UpdateSchedule
         lStuSch.UpdateSchedule.wTermCohortPromptText = "Term"
         lStuSch.UpdateSchedule.YearSemester = wStudent.CollegeTerm.YearSemester
         lStuSch.UpdateSchedule.Semester     = wStudent.CollegeTerm.Semester
         FOR EACH lStuSch.Registration
            CollegeTermID = 0
            IF lStuSch.RegisteredCollegeTerm EXISTS
               CollegeTermID = lStuSch.RegisteredCollegeTerm.ID
            ELSE
               IF lStuSch.RegistrationCollegeTerm EXISTS
                  CollegeTermID = lStuSch.RegistrationCollegeTerm.ID
               END
            END
            IF CollegeTermID != 0
               IF CollegeTermID = wStudent.CollegeTerm.ID AND
                  (lStuSch.Registration.Status = "C" OR lStuSch.Registration.Status = "T")

                  INCLUDE lStuSch.US_Registration FROM lStuSch.Registration
                  GetStringFromAttributeByContext( szDayOfWeek, lStuSch, "US_Class", "FinalExamDate", "DayOfWeek", 10 )
                  SetAttrFromStrByContext( lStuSch, "US_Class", "wFinalExamDayOfWeek", szDayOfWeek, "" )
               END
            END
         END
         FOR EACH lStuSch.StudentWaitlisted
            IF lStuSch.WaitlistedCollegeTerm EXISTS
               IF lStuSch.WaitlistedCollegeTerm.ID = wStudent.CollegeTerm.ID
                  INCLUDE lStuSch.US_StudentWaitlisted FROM lStuSch.StudentWaitlisted
               END
            END
         END
      END
   END

   // Build work values.
   YearTotalCredits = 0
   FOR EACH lStuSch.UpdateSchedule
      TermTotalCredits = 0
      FOR EACH lStuSch.US_Registration

         // Construct Class Number and Title.
         IF lStuSch.US_CrossListedCourse EXISTS
            szCourseNumber = lStuSch.US_CrossListedCourse.Number
            lStuSch.US_Class.wClassTitle = lStuSch.US_CrossListedCourse.Title
         ELSE
            szCourseNumber = lStuSch.US_Course.Number
            lStuSch.US_Class.wClassTitle = lStuSch.US_Course.Title
         END
         IF lStuSch.US_CourseTopic EXISTS
            szTopicNumber = lStuSch.US_CourseTopic.Number
            lStuSch.US_Class.wClassTitle = lStuSch.US_CourseTopic.Title    // Title is overriden if Topic exists.
         ELSE
            szTopicNumber = ""
         END
         szSection = lStuSch.US_Class.Section
         IF szSection != "" OR szTopicNumber != ""
            szClassNumber = szCourseNumber + "-" + szTopicNumber + szSection
         ELSE
            szClassNumber = szCourseNumber
         END
         lStuSch.US_Class.wClassNumber = szClassNumber

         // Construct other data.
         IF lStuSch.US_Building EXISTS
            lStuSch.US_Class.wRoom = lStuSch.US_Building.ShortName  + " " + lStuSch.US_ClassRoom.Number
         END
         IF lStuSch.US_FinalExamBuilding EXISTS
            lStuSch.US_Class.wFinalExamRoom = lStuSch.US_FinalExamBuilding.ShortName + " " + lStuSch.US_FinalExamRoom.Number
         END
         TermTotalCredits = TermTotalCredits + lStuSch.US_Registration.CreditHours
         YearTotalCredits = YearTotalCredits + lStuSch.US_Registration.CreditHours
         FOR EACH lStuSch.US_ClassRoomSession
            IF lStuSch.US_ClassRoomSession.MeetingDay > 0
               GetStringFromAttributeByContext( MeetingDay, lStuSch, "US_ClassRoomSession", "MeetingDay", "", 20 )
               lStuSch.US_ClassRoomSession.wMeetingDay = MeetingDay
            ELSE
               GetStringFromAttributeByContext( MeetingDay, lStuSch, "US_ClassRoomSession", "MeetingDate", "", 20 )
               lStuSch.US_ClassRoomSession.wMeetingDay = MeetingDay
            END
         END
      END
      lStuSch.UpdateSchedule.wTotalCredits = TermTotalCredits
      FOR EACH lStuSch.US_StudentWaitlisted

         // Construct Class Title.
         IF lStuSch.US_WaitlistedCourseTopic EXISTS
            lStuSch.US_WaitlistedClass.wClassTitle = lStuSch.US_WaitlistedCourseTopic.Title
         ELSE
            lStuSch.US_WaitlistedClass.wClassTitle = lStuSch.US_WaitlistedCourse.Title
         END

         // Construct Class Number
         IF lStuSch.US_WL_CrossListedCourse EXISTS
            szCourseNumber = lStuSch.US_WL_CrossListedCourse.Number
         ELSE
            szCourseNumber = lStuSch.US_WaitlistedCourse.Number
         END
         IF lStuSch.US_WaitlistedCourseTopic EXISTS
            szTopicNumber = lStuSch.US_WaitlistedCourseTopic.Number
         ELSE
            szTopicNumber = ""
         END
         szSection = lStuSch.US_WaitlistedClass.Section
         IF szSection != "" OR szTopicNumber != ""
            szClassNumber = szCourseNumber + "-" + szTopicNumber + szSection
         ELSE
            szClassNumber = szCourseNumber
         END
         lStuSch.US_WaitlistedClass.wClassNumber = szClassNumber

         IF lStuSch.US_WaitlistedClassBuilding EXISTS
            lStuSch.US_WaitlistedClass.wRoom = lStuSch.US_WaitlistedClassBuilding.ShortName  + " " + lStuSch.US_WaitlistedClassRoom.Number
         END

         FOR EACH lStuSch.US_WaitlistedClassRoomSession
            IF lStuSch.US_WaitlistedClassRoomSession.MeetingDay > 0
               GetStringFromAttributeByContext( MeetingDay, lStuSch, "US_WaitlistedClassRoomSession", "MeetingDay", "", 20 )
               lStuSch.US_WaitlistedClassRoomSession.wMeetingDay = MeetingDay
            ELSE
               GetStringFromAttributeByContext( MeetingDay, lStuSch, "US_WaitlistedClassRoomSession", "MeetingDate", "", 20 )
               lStuSch.US_WaitlistedClassRoomSession.wMeetingDay = MeetingDay
            END
         END
      END
   END

   // If the request is for a year, display year totals.
   IF wStudent.CollegeTerm DOES NOT EXIST
      CREATE ENTITY lStuSch.YearTotals
      lStuSch.YearTotals.TotalCredits = YearTotalCredits
      IF wStudent.Work.PrintOptionCohortFlag = "Y"
         lStuSch.YearTotals.TotalPrompt = "Total Enrolled Credits:"
      ELSE
         lStuSch.YearTotals.TotalPrompt = "Total Credits for Year:"
      END
   END

   // Create Building/Room Legend
   FOR EACH lStuSch.US_Registration WITHIN lStuSch.Student
      IF lStuSch.US_Building EXISTS
         BuildingRoomCode = lStuSch.US_Building.ShortName
         IF lStuSch.US_ClassRoom.Note != ""
            BuildingRoomCode = BuildingRoomCode + " " + lStuSch.US_ClassRoom.Number
         END
         SET CURSOR FIRST lStuSch.BuildingRoomLegend
                    WHERE lStuSch.BuildingRoomLegend.OriginalValue = BuildingRoomCode
         IF RESULT < zCURSOR_SET
            SET CURSOR LAST lStuSch.BuildingRoomLegend
            CREATE ENTITY lStuSch.BuildingRoomLegend
            lStuSch.BuildingRoomLegend.OriginalValue = BuildingRoomCode
            IF lStuSch.US_ClassRoom.Note != ""
               lStuSch.BuildingRoomLegend.Description = lStuSch.US_Building.Name + ", " +
                                                        lStuSch.US_ClassRoom.Note
            ELSE
               lStuSch.BuildingRoomLegend.Description = lStuSch.US_Building.Name
            END
         END
      END
   END
   FOR EACH lStuSch.US_StudentWaitlisted WITHIN lStuSch.Student
      IF lStuSch.US_WaitlistedClassBuilding EXISTS
         BuildingRoomCode = lStuSch.US_WaitlistedClassBuilding.ShortName
         IF lStuSch.US_WaitlistedClassRoom.Note != ""
            BuildingRoomCode = BuildingRoomCode + " " + lStuSch.US_WaitlistedClassRoom.Number
         END
         SET CURSOR FIRST lStuSch.BuildingRoomLegend
                    WHERE lStuSch.BuildingRoomLegend.OriginalValue = BuildingRoomCode
         IF RESULT < zCURSOR_SET
            SET CURSOR LAST lStuSch.BuildingRoomLegend
            CREATE ENTITY lStuSch.BuildingRoomLegend
            lStuSch.BuildingRoomLegend.OriginalValue = BuildingRoomCode
            IF lStuSch.US_WaitlistedClassRoom.Note != ""
               lStuSch.BuildingRoomLegend.Description = lStuSch.US_WaitlistedClassBuilding.ShortName + ", " +
                                                        lStuSch.US_WaitlistedClassRoom.Note
            ELSE
               lStuSch.BuildingRoomLegend.Description = lStuSch.US_WaitlistedClassBuilding.Name
            END
         END
      END
   END

   // If this is a Cohort Schedule, build the work subobject and drop the regular US_Registration entries.
   IF wStudent.Work.PrintOptionCohortFlag = "Y"
      FOR EACH lStuSch.US_Registration
         CREATE ENTITY lStuSch.CohortRegistration
         lStuSch.CohortRegistration.wClassNumber   = lStuSch.US_Class.wClassNumber
         lStuSch.CohortRegistration.wClassTitle    = lStuSch.US_Class.wClassTitle
         lStuSch.CohortRegistration.wRoom          = lStuSch.US_Class.wRoom
         lStuSch.CohortRegistration.wFinalExamRoom = lStuSch.US_Class.wFinalExamRoom
         lStuSch.CohortRegistration.ClassStartDate = lStuSch.US_Class.ClassStartDate
         lStuSch.CohortRegistration.ClassEndDate   = lStuSch.US_Class.ClassEndDate
         lStuSch.CohortRegistration.CreditHours    = lStuSch.US_Registration.CreditHours
         IF lStuSch.US_Instructor EXISTS
            lStuSch.CohortRegistration.ShortName = lStuSch.US_Instructor.ShortName
         END
         IF lStuSch.US_ClassCohort EXISTS
            lStuSch.CohortRegistration.CohortName = lStuSch.US_ClassCohort.Name
         ELSE
            IF lStuSch.US_RegistrationCollegeTerm EXISTS
               lStuSch.CohortRegistration.CohortName = lStuSch.US_RegistrationCollegeTerm.YearSemester
            END
         END
         FOR EACH lStuSch.US_ClassRoomSession
            INCLUDE lStuSch.CohortClassRoomSession FROM lStuSch.US_ClassRoomSession
            lStuSch.CohortClassRoomSession.wMeetingDay = lStuSch.US_ClassRoomSession.wMeetingDay
         END
         EXCLUDE lStuSch.US_Registration NONE
      END
   END

   // Create dummy entity so that Building/Room Legend prints.
   CREATE ENTITY lStuSch.DummyTrailer

END

/*************************************************************************************************
**
**    OPERATION: dFullNameFML
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dFullNameFML( VIEW lStuSch BASED ON LOD lStuSch,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   CASE GetOrSetFlag
      OF zDERIVED_GET:

      PersonName_FirstMiddleLast( lStuSch, InternalEntityStructure, InternalAttribStructure, GetOrSetFlag )

   /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: dFullNameLFM
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dFullNameLFM( VIEW lStuSch BASED ON LOD lStuSch,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   CASE GetOrSetFlag
      OF zDERIVED_GET:

      PersonName_LastFirstMiddle( lStuSch, InternalEntityStructure, InternalAttribStructure, GetOrSetFlag )

   /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: dTakingClassType
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dTakingClassType( VIEW lStuSch BASED ON LOD lStuSch,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 10 ) szTakingClassType

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

   // If TakingClassType is null in enrollment entity, use the value from the Class.
   IF lStuSch.US_Registration.TakingClassType = ""
      szTakingClassType = ""
      IF lStuSch.US_Class.PassFailClass = "Y"
         szTakingClassType = "P/F"
      END
      IF lStuSch.US_Class.HonorsFlag = "Y"
         IF szTakingClassType = ""
            szTakingClassType = szTakingClassType + "," + "H"
         ELSE
            szTakingClassType = "H"
         END
      END
   ELSE
      GetStringFromAttributeByContext( szTakingClassType, lStuSch, "US_Registration", "TakingClassType", "ShortName", 10 )
   END

   // Store the calculated value in the object.
   StoreStringInRecord ( lStuSch,
                         InternalEntityStructure, InternalAttribStructure, szTakingClassType )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END
