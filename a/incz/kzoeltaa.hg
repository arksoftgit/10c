// KZOELTAA.HG - Global literals used only by the Object Engine DLL
//               KZOENGAA
//

/*
CHANGE LOG

1999.05.07  DGC
   Removed stuff for old portable file headers.

*/

#ifdef __cplusplus
extern "C" {
#endif

mGLOBAL_DECLARE( zULONG, g_ulMaxRecordStringLth, 9 );
mGLOBAL_DECLARE( char, cDirSep, '\\' );
#ifdef __OS2__
mGLOBAL_DECLARE( zPCHAR, szObjectEngineName, "kzoeng2a.exe" );
#else
mGLOBAL_DECLARE( zPCHAR, szObjectEngineName, "kzoengwa.exe" );
#endif
mGLOBAL_DECLARE( zPCHAR, szObjectEngineDll, "kzoengaa.dll" );
mGLOBAL_DECLARE( zPCHAR, szObjectSuffix, ".xod" );
mGLOBAL_DECLARE( zPCHAR, szDllSuffix, ".dll" );
// mGLOBAL_DECLARE( zPCHAR, szPortableSuffix, ".por" );
// mGLOBAL_DECLARE( zPCHAR, szBinarySuffix, ".xor" );
mGLOBAL_DECLARE( zPCHAR, lpNullP, 0 );
mGLOBAL_DECLARE( zPCHAR, szNullS, "\0\0\0\0\0\0\0\0" );
mGLOBAL_DECLARE( long, lNullInteger, -2147483647 - 1 );  // to avoid warnings

zEXTERN DateTimeInternalRecord  stNullDateTime
#ifdef zGLOBAL_DATA
       = { (zULONG) -2147483647 - 1, 0 }
#endif
         ;

mGLOBAL_DECLARE( zPVOID, pHab, 0 );
mGLOBAL_DECLARE( long, hModule, 0 );

mGLOBAL_DECLARE( zPCHAR, szlZEIDON, "ZEIDON" );

// System File Names
mGLOBAL_DECLARE( zPCHAR, szlAppFile, "zeidon.app" );
mGLOBAL_DECLARE( zPCHAR, szlDomainFile, "zeidon.xdm" );
mGLOBAL_DECLARE( zPCHAR, szlSystemDomainFile, "kzomdmoi.xdm" );
mGLOBAL_DECLARE( zPCHAR, szlMessageObject, "KZMSGQOO" );

mGLOBAL_DECLARE( zPCHAR, szlNewPortableHeader, "z" );
mGLOBAL_DECLARE( zPCHAR, szlmZeidon, "Zeidon" );  // mixed case Zeidon


// System Object Entity names
mGLOBAL_DECLARE( zPCHAR, szlAPPLICATION, "APPLICATION" );

mGLOBAL_DECLARE( zPCHAR, szlOBJECT, "OBJECT" );
mGLOBAL_DECLARE( zPCHAR, szlENTITY, "ENTITY" );
mGLOBAL_DECLARE( zPCHAR, szlCHILDENTITY, "CHILDENTITY" );
mGLOBAL_DECLARE( zPCHAR, szlATTRIB, "ATTRIB" );

mGLOBAL_DECLARE( zPCHAR, szlDOMAIN, "DOMAIN" );

mGLOBAL_DECLARE( zPCHAR, szlMODEL, "MODEL" );

// Domain Object Entity names
mGLOBAL_DECLARE( zPCHAR, szlCONTEXT, "CONTEXT" );
mGLOBAL_DECLARE( zPCHAR, szlNLS_TABLEENTRY, "NLS_TABLEENTRY" );
mGLOBAL_DECLARE( zPCHAR, szlTABLEENTRY, "TABLEENTRY" );
mGLOBAL_DECLARE( zPCHAR, szlREGULAREXPRESSION, "REGULAREXPRESSION" );

// System Object Attrib names
mGLOBAL_DECLARE( zPCHAR, szlZEIDON_BIN, "ZEIDON_BIN" );
mGLOBAL_DECLARE( zPCHAR, szlZEIDON_SYS, "ZEIDON_SYS" );
mGLOBAL_DECLARE( zPCHAR, szlZEIDON_LOC, "ZEIDON_LOC" );
mGLOBAL_DECLARE( zPCHAR, szlZEIDON_SHR, "ZEIDON_SHR" );

mGLOBAL_DECLARE( zPCHAR, szlAPP_NAME, "APP_NAME" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_DFLT_Dialog, "APP_DFLT_WDOD" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_DLL, "APP_DLL" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_ADOBIN, "APP_ADOBIN" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_LOCAL, "APP_LOCAL" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_SHARED, "APP_SHARED" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_QLPLR, "APP_QLPLR" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_QXODS, "APP_QXODS" );
mGLOBAL_DECLARE( zPCHAR, szlAPP_SOURCE, "APP_SOURCE" );

mGLOBAL_DECLARE( zPCHAR, szlAPDM_TOK, "APDM_TOK" );
mGLOBAL_DECLARE( zPCHAR, szlATTRIBUTETYPE, "ATTRIBUTETYPE" );
mGLOBAL_DECLARE( zPCHAR, szlATTRIBUTEDECIMAL, "ATTRIBUTEDECIMAL" );
mGLOBAL_DECLARE( zPCHAR, szlAUTOCREATE, "AUTOCREATE" );
mGLOBAL_DECLARE( zPCHAR, szlAUTOLOADFROMPARENT, "AUTOLOADFROMPARENT" );
mGLOBAL_DECLARE( zPCHAR, szlAUTO_SEQ, "AUTO_SEQ" );
mGLOBAL_DECLARE( zPCHAR, szlXVAATT_TOK, "XVAATT_TOK" );
mGLOBAL_DECLARE( zPCHAR, szlCARDMAX, "CARDMAX" );
mGLOBAL_DECLARE( zPCHAR, szlCARDMIN, "CARDMIN" );
mGLOBAL_DECLARE( zPCHAR, szlCASESENS, "CASESENS" );
mGLOBAL_DECLARE( zPCHAR, szlCONTEXTRESTRICTION, "CONTEXTRESTRICTION" );
mGLOBAL_DECLARE( zPCHAR, szlCREATE, "CREATE" );
mGLOBAL_DECLARE( zPCHAR, szlCR_DATE, "CR_DATE" );
mGLOBAL_DECLARE( zPCHAR, szlDATAFIELD, "DATAFIELD" );
mGLOBAL_DECLARE( zPCHAR, szlDATARECORD, "DATARECORD" );
mGLOBAL_DECLARE( zPCHAR, szlDATATYPE, "DATATYPE" );
mGLOBAL_DECLARE( zPCHAR, szlDBNAME, "DBNAME" );
mGLOBAL_DECLARE( zPCHAR, szlDECIMAL, "DECIMAL" );
mGLOBAL_DECLARE( zPCHAR, szlDECIMALFORMAT, "DECIMALFORMAT" );
mGLOBAL_DECLARE( zPCHAR, szlDELETE, "DELETE" );
mGLOBAL_DECLARE( zPCHAR, szlDERIVED, "DERIVED" );
mGLOBAL_DECLARE( zPCHAR, szlDERIVEDF, "DERIVEDF" );
mGLOBAL_DECLARE( zPCHAR, szlDFT_DBNAME, "DFT_DBNAME" );
mGLOBAL_DECLARE( zPCHAR, szlDFT_SERVER, "DFT_SERVER" );
mGLOBAL_DECLARE( zPCHAR, szlDLL_NAME, "DLL_NAME" );
mGLOBAL_DECLARE( zPCHAR, szlDOMAINTYPE, "DOMAINTYPE" );
mGLOBAL_DECLARE( zPCHAR, szlDUPENTIN, "DUPENTIN" );
mGLOBAL_DECLARE( zPCHAR, szlDUPRELIN, "DUPRELIN" );
mGLOBAL_DECLARE( zPCHAR, szlECACC, "ECACC" );
mGLOBAL_DECLARE( zPCHAR, szlECCAN, "ECCAN" );
mGLOBAL_DECLARE( zPCHAR, szlECCR, "ECCR" );
mGLOBAL_DECLARE( zPCHAR, szlECDEL, "ECDEL" );
mGLOBAL_DECLARE( zPCHAR, szlECEOPER, "ECEOPER" );
mGLOBAL_DECLARE( zPCHAR, szlECEXC, "ECEXC" );
mGLOBAL_DECLARE( zPCHAR, szlECINC, "ECINC" );
mGLOBAL_DECLARE( zPCHAR, szlEDITSTRING, "EDITSTRING" );
mGLOBAL_DECLARE( zPCHAR, szlERATT_TOK, "ERATT_TOK" );
mGLOBAL_DECLARE( zPCHAR, szlEntityName, "EntityName" );
mGLOBAL_DECLARE( zPCHAR, szlEntitySpec, "EntitySpec" );
mGLOBAL_DECLARE( zPCHAR, szlERENT_TOK, "ERENT_TOK" );
mGLOBAL_DECLARE( zPCHAR, szlERREL_LINK, "ERREL_LINK" );
mGLOBAL_DECLARE( zPCHAR, szlERREL_TOK, "ERREL_TOK" );
mGLOBAL_DECLARE( zPCHAR, szlEXCLUDE, "EXCLUDE" );
mGLOBAL_DECLARE( zPCHAR, szlEXTERNALVALUE, "EXTERNALVALUE" );
mGLOBAL_DECLARE( zPCHAR, szlFLDID, "FLDID" );
mGLOBAL_DECLARE( zPCHAR, szlFLDLTH, "FLDLTH" );
mGLOBAL_DECLARE( zPCHAR, szlFLDNAME, "FLDNAME" );
mGLOBAL_DECLARE( zPCHAR, szlFLDOFFSET, "FLDOFFSET" );
mGLOBAL_DECLARE( zPCHAR, szlFLDTYPE, "FLDTYPE" );
mGLOBAL_DECLARE( zPCHAR, szlFULLPERSIST, "FULLPERSIST" );
mGLOBAL_DECLARE( zPCHAR, szlGENKEY, "GENKEY" );
mGLOBAL_DECLARE( zPCHAR, szlGKHANDLER, "GKHANDLER" );
mGLOBAL_DECLARE( zPCHAR, szlHANDLER, "HANDLER" );
mGLOBAL_DECLARE( zPCHAR, szlHIDDEN, "HIDDEN" );
mGLOBAL_DECLARE( zPCHAR, szlId, "Id" );
mGLOBAL_DECLARE( zPCHAR, szlINCLSRC, "INCLSRC" );
mGLOBAL_DECLARE( zPCHAR, szlINCLUDE, "INCLUDE" );
mGLOBAL_DECLARE( zPCHAR, szlINCRLOAD, "INCRLOAD" );
mGLOBAL_DECLARE( zPCHAR, szlINIT, "INIT" );
mGLOBAL_DECLARE( zPCHAR, szlINTERNALVALUE, "INTERNALVALUE" );
mGLOBAL_DECLARE( zPCHAR, szlISDEFAULT, "ISDEFAULT" );
mGLOBAL_DECLARE( zPCHAR, szlKEY, "KEY" );
mGLOBAL_DECLARE( zPCHAR, szlLanguageIndex, "LanguageIndex" );
mGLOBAL_DECLARE( zPCHAR, szlLNAME, "LNAME" );
mGLOBAL_DECLARE( zPCHAR, szlLOCK, "LOCK" );
mGLOBAL_DECLARE( zPCHAR, szlLTH, "LTH" );
mGLOBAL_DECLARE( zPCHAR, szlMAXSTRINGLTH, "MAXSTRINGLTH" );
mGLOBAL_DECLARE( zPCHAR, szlMR_LIMIT, "MR_LIMIT" );
mGLOBAL_DECLARE( zPCHAR, szl__MSGQ, "__MSGQ" );
mGLOBAL_DECLARE( zPCHAR, szlNAME, "NAME" );
mGLOBAL_DECLARE( zPCHAR, szlNETCOMPRESS, "NETCOMPRESS" );
mGLOBAL_DECLARE( zPCHAR, szlNETWORK, "NETWORK" );
mGLOBAL_DECLARE( zPCHAR, szlNumAtts, "NumAtts" );
mGLOBAL_DECLARE( zPCHAR, szlNumEnts, "NumEnts" );
mGLOBAL_DECLARE( zPCHAR, szlNumRels, "NumRels" );
mGLOBAL_DECLARE( zPCHAR, szlOCACT, "OCACT" );
mGLOBAL_DECLARE( zPCHAR, szlOCACTE, "OCACTE" );
mGLOBAL_DECLARE( zPCHAR, szlOCCOM, "OCCOM" );
mGLOBAL_DECLARE( zPCHAR, szlOCDROP, "OCDROP" );
mGLOBAL_DECLARE( zPCHAR, szlOCEOPER, "OCEOPER" );
mGLOBAL_DECLARE( zPCHAR, szlOFRECID, "OFRECID" );
mGLOBAL_DECLARE( zPCHAR, szlOFBUFSZ, "OFBUFSZ" );
mGLOBAL_DECLARE( zPCHAR, szlOPER_LIBNM, "OPER_LIBNM" );
mGLOBAL_DECLARE( zPCHAR, szlOper, "Oper" );
mGLOBAL_DECLARE( zPCHAR, szlOWNER_MEMB, "OWNER_MEMB" );
mGLOBAL_DECLARE( zPCHAR, szlPDELETE, "PDELETE" );
mGLOBAL_DECLARE( zPCHAR, szlPERSIST, "PERSIST" );
mGLOBAL_DECLARE( zPCHAR, szlPNAME, "PNAME" );
mGLOBAL_DECLARE( zPCHAR, szlQualAttrib, "QualAttrib" );
mGLOBAL_DECLARE( zPCHAR, szlRECID, "RECID" );
mGLOBAL_DECLARE( zPCHAR, szlRECNAME, "RECNAME" );
mGLOBAL_DECLARE( zPCHAR, szlRECURSIVE, "RECURSIVE" );
mGLOBAL_DECLARE( zPCHAR, szlREL, "REL" );
mGLOBAL_DECLARE( zPCHAR, szlRELFIELD, "RELFIELD" );
mGLOBAL_DECLARE( zPCHAR, szlRELRECORD, "RELRECORD" );
mGLOBAL_DECLARE( zPCHAR, szlRELXVAATT_TOK, "RELXVAATT_TOK" );
mGLOBAL_DECLARE( zPCHAR, szlREQUIRED, "REQUIRED" );
mGLOBAL_DECLARE( zPCHAR, szlRESTRICTED, "RESTRICTED" );
mGLOBAL_DECLARE( zPCHAR, szlSERVER, "SERVER" );
mGLOBAL_DECLARE( zPCHAR, szlSEQUENCING, "SEQUENCING" );
mGLOBAL_DECLARE( zPCHAR, szlSEQ_AD, "SEQ_AD" );
mGLOBAL_DECLARE( zPCHAR, szlSETID1, "SETID1" );
mGLOBAL_DECLARE( zPCHAR, szlSETID2, "SETID2" );
mGLOBAL_DECLARE( zPCHAR, szlSETNAME1, "SETNAME1" );
mGLOBAL_DECLARE( zPCHAR, szlSETNAME2, "SETNAME2" );
mGLOBAL_DECLARE( zPCHAR, szlSRCXVAATT_TOK, "SRCXVAATT_TOK" );
// mGLOBAL_DECLARE( zPCHAR, szlSUFFIXB, "SUFFIXB" );
// mGLOBAL_DECLARE( zPCHAR, szlSUFFIXP, "SUFFIXP" );
mGLOBAL_DECLARE( zPCHAR, szlTask, "Task" );
mGLOBAL_DECLARE( zPCHAR, szlText, "Text" );
mGLOBAL_DECLARE( zPCHAR, szlTYPE, "TYPE" );
mGLOBAL_DECLARE( zPCHAR, szlUP_DATE, "UP_DATE" );
mGLOBAL_DECLARE( zPCHAR, szlUSERID, "USERID" );
mGLOBAL_DECLARE( zPCHAR, szlUPDATE, "UPDATE" );
mGLOBAL_DECLARE( zPCHAR, szlZKEY, "ZKEY" );

// Titles, sent to MessageObject
mGLOBAL_DECLARE( zPCHAR, szlApplicationLogicError,
                 "Object Services - Application Logic Error" );
mGLOBAL_DECLARE( zPCHAR, szlDataValidationError, "Data Validation Error" );
mGLOBAL_DECLARE( zPCHAR, szlOE_SystemError, "OE System Error" );

// Miscellaneous literals
mGLOBAL_DECLARE( zPCHAR, szlAFTER, "AFTER" );
mGLOBAL_DECLARE( zPCHAR, szlBEFORE, "BEFORE" );

// MQ Interface names
zEXTERN char  zFAR *g_pchMQI[ MAX_CORE_MQ_INT ]
#ifdef zGLOBAL_DATA
       = { "MQ_MessageSend",
           "MQ_MessagePrompt",
           "MQ_MessagePromptForInput",
           "MQ_MessagePresent" }
#endif
         ;

// Null for GetAddrForAttr
mGLOBAL_DECLARE( zPCHAR, szGAFANullS, "\0\0\0\0\0\0\0\0" );

// Month table
zEXTERN char zFAR *g_pchMon[ 12 ]
#ifdef zGLOBAL_DATA
       = { "January", "February", "March", "April",
           "May", "June", "July", "August",
           "September", "October", "November",
           "December" }
#endif
         ;

// Day of Week Table
zEXTERN char zFAR *g_pchDOW[ 7 ]
#ifdef zGLOBAL_DATA
       = { "Sunday", "Monday", "Tuesday",
           "Wednesday", "Thursday", "Friday",
           "Saturday" }
#endif
         ;

// Used in retrieving international information from the WIN.INI file
mGLOBAL_DECLARE( zPCHAR, szlINTL, "Intl" );
mGLOBAL_DECLARE( zPCHAR, szlICOUNTRY, "iCountry" );
mGLOBAL_DECLARE( zPCHAR, szlSCOUNTRY, "sCountry" );
mGLOBAL_DECLARE( zPCHAR, szlSLANGUAGE, "sLanguage" );
mGLOBAL_DECLARE( zPCHAR, szlSLIST, "sList" );
mGLOBAL_DECLARE( zPCHAR, szlIMEASURE, "iMeasure" );
mGLOBAL_DECLARE( zPCHAR, szlITIME, "iTime" );
mGLOBAL_DECLARE( zPCHAR, szlSTIME, "sTime" );
mGLOBAL_DECLARE( zPCHAR, szlS1159, "s1159" );
mGLOBAL_DECLARE( zPCHAR, szlS2359, "s2359" );
mGLOBAL_DECLARE( zPCHAR, szlITLZERO, "iTLZero" );
mGLOBAL_DECLARE( zPCHAR, szlSSHORTDATE, "sShortDate" );
mGLOBAL_DECLARE( zPCHAR, szlSLONGDATE, "sLongDate" );
mGLOBAL_DECLARE( zPCHAR, szlSCURRENCY, "sCurrency" );
mGLOBAL_DECLARE( zPCHAR, szlICURRENCY, "iCurrency" );
mGLOBAL_DECLARE( zPCHAR, szlICURRDIGITS, "iCurrDigits" );
mGLOBAL_DECLARE( zPCHAR, szlINEGCURR, "iNegCurr" );
mGLOBAL_DECLARE( zPCHAR, szlSTHOUSAND, "sThousand" );
mGLOBAL_DECLARE( zPCHAR, szlSDECIMAL, "sDecimal" );
mGLOBAL_DECLARE( zPCHAR, szlIDIGITS, "iDigits" );
mGLOBAL_DECLARE( zPCHAR, szlILZERO, "iLzero" );

#ifdef __cplusplus
}
#endif

